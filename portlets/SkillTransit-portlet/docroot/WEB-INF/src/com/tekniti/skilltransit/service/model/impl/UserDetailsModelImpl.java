/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tekniti.skilltransit.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.tekniti.skilltransit.service.model.UserDetails;
import com.tekniti.skilltransit.service.model.UserDetailsModel;
import com.tekniti.skilltransit.service.model.UserDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserDetails service. Represents a row in the &quot;user_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.tekniti.skilltransit.service.model.UserDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDetailsImpl}.
 * </p>
 *
 * @author Hari
 * @see UserDetailsImpl
 * @see com.tekniti.skilltransit.service.model.UserDetails
 * @see com.tekniti.skilltransit.service.model.UserDetailsModel
 * @generated
 */
@JSON(strict = true)
public class UserDetailsModelImpl extends BaseModelImpl<UserDetails>
	implements UserDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user details model instance should use the {@link com.tekniti.skilltransit.service.model.UserDetails} interface instead.
	 */
	public static final String TABLE_NAME = "user_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "user_id", Types.BIGINT },
			{ "hourly_rate", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "client", Types.VARCHAR },
			{ "commute", Types.VARCHAR },
			{ "skill", Types.VARCHAR },
			{ "state_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table user_details (user_id LONG not null primary key,hourly_rate VARCHAR(75) null,zipCode VARCHAR(75) null,category VARCHAR(75) null,client VARCHAR(75) null,commute VARCHAR(75) null,skill VARCHAR(75) null,state_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table user_details";
	public static final String ORDER_BY_JPQL = " ORDER BY userDetails.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY user_details.user_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.tekniti.skilltransit.service.model.UserDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.tekniti.skilltransit.service.model.UserDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserDetails toModel(UserDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserDetails model = new UserDetailsImpl();

		model.setUserId(soapModel.getUserId());
		model.setHourlyRate(soapModel.getHourlyRate());
		model.setZipCode(soapModel.getZipCode());
		model.setCategory(soapModel.getCategory());
		model.setClient(soapModel.getClient());
		model.setCommute(soapModel.getCommute());
		model.setSkill(soapModel.getSkill());
		model.setState(soapModel.getState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserDetails> toModels(UserDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserDetails> models = new ArrayList<UserDetails>(soapModels.length);

		for (UserDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.tekniti.skilltransit.service.model.UserDetails"));

	public UserDetailsModelImpl() {
	}

	public long getPrimaryKey() {
		return _userId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_userId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserDetails.class;
	}

	public String getModelClassName() {
		return UserDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("hourlyRate", getHourlyRate());
		attributes.put("zipCode", getZipCode());
		attributes.put("category", getCategory());
		attributes.put("client", getClient());
		attributes.put("commute", getCommute());
		attributes.put("skill", getSkill());
		attributes.put("state", getState());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String hourlyRate = (String)attributes.get("hourlyRate");

		if (hourlyRate != null) {
			setHourlyRate(hourlyRate);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String client = (String)attributes.get("client");

		if (client != null) {
			setClient(client);
		}

		String commute = (String)attributes.get("commute");

		if (commute != null) {
			setCommute(commute);
		}

		String skill = (String)attributes.get("skill");

		if (skill != null) {
			setSkill(skill);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getHourlyRate() {
		if (_hourlyRate == null) {
			return StringPool.BLANK;
		}
		else {
			return _hourlyRate;
		}
	}

	public void setHourlyRate(String hourlyRate) {
		_hourlyRate = hourlyRate;
	}

	@JSON
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	public String getClient() {
		if (_client == null) {
			return StringPool.BLANK;
		}
		else {
			return _client;
		}
	}

	public void setClient(String client) {
		_client = client;
	}

	@JSON
	public String getCommute() {
		if (_commute == null) {
			return StringPool.BLANK;
		}
		else {
			return _commute;
		}
	}

	public void setCommute(String commute) {
		_commute = commute;
	}

	@JSON
	public String getSkill() {
		if (_skill == null) {
			return StringPool.BLANK;
		}
		else {
			return _skill;
		}
	}

	public void setSkill(String skill) {
		_skill = skill;
	}

	@JSON
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	public void setState(String state) {
		_state = state;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public UserDetails toUnescapedModel() {
		return (UserDetails)this;
	}

	@Override
	public Object clone() {
		UserDetailsImpl userDetailsImpl = new UserDetailsImpl();

		userDetailsImpl.setUserId(getUserId());
		userDetailsImpl.setHourlyRate(getHourlyRate());
		userDetailsImpl.setZipCode(getZipCode());
		userDetailsImpl.setCategory(getCategory());
		userDetailsImpl.setClient(getClient());
		userDetailsImpl.setCommute(getCommute());
		userDetailsImpl.setSkill(getSkill());
		userDetailsImpl.setState(getState());

		userDetailsImpl.resetOriginalValues();

		return userDetailsImpl;
	}

	public int compareTo(UserDetails userDetails) {
		int value = 0;

		if (getUserId() < userDetails.getUserId()) {
			value = -1;
		}
		else if (getUserId() > userDetails.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserDetails)) {
			return false;
		}

		UserDetails userDetails = (UserDetails)obj;

		long primaryKey = userDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserDetails> toCacheModel() {
		UserDetailsCacheModel userDetailsCacheModel = new UserDetailsCacheModel();

		userDetailsCacheModel.userId = getUserId();

		userDetailsCacheModel.hourlyRate = getHourlyRate();

		String hourlyRate = userDetailsCacheModel.hourlyRate;

		if ((hourlyRate != null) && (hourlyRate.length() == 0)) {
			userDetailsCacheModel.hourlyRate = null;
		}

		userDetailsCacheModel.zipCode = getZipCode();

		String zipCode = userDetailsCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			userDetailsCacheModel.zipCode = null;
		}

		userDetailsCacheModel.category = getCategory();

		String category = userDetailsCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			userDetailsCacheModel.category = null;
		}

		userDetailsCacheModel.client = getClient();

		String client = userDetailsCacheModel.client;

		if ((client != null) && (client.length() == 0)) {
			userDetailsCacheModel.client = null;
		}

		userDetailsCacheModel.commute = getCommute();

		String commute = userDetailsCacheModel.commute;

		if ((commute != null) && (commute.length() == 0)) {
			userDetailsCacheModel.commute = null;
		}

		userDetailsCacheModel.skill = getSkill();

		String skill = userDetailsCacheModel.skill;

		if ((skill != null) && (skill.length() == 0)) {
			userDetailsCacheModel.skill = null;
		}

		userDetailsCacheModel.state = getState();

		String state = userDetailsCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			userDetailsCacheModel.state = null;
		}

		return userDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", hourlyRate=");
		sb.append(getHourlyRate());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", client=");
		sb.append(getClient());
		sb.append(", commute=");
		sb.append(getCommute());
		sb.append(", skill=");
		sb.append(getSkill());
		sb.append(", state=");
		sb.append(getState());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.tekniti.skilltransit.service.model.UserDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hourlyRate</column-name><column-value><![CDATA[");
		sb.append(getHourlyRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>client</column-name><column-value><![CDATA[");
		sb.append(getClient());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commute</column-name><column-value><![CDATA[");
		sb.append(getCommute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>skill</column-name><column-value><![CDATA[");
		sb.append(getSkill());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserDetails.class
		};
	private long _userId;
	private String _userUuid;
	private String _hourlyRate;
	private String _zipCode;
	private String _category;
	private String _client;
	private String _commute;
	private String _skill;
	private String _state;
	private UserDetails _escapedModel;
}