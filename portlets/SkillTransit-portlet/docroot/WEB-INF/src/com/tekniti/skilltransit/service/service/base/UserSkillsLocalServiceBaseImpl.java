/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tekniti.skilltransit.service.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.tekniti.skilltransit.service.model.UserSkills;
import com.tekniti.skilltransit.service.service.SkillCategoryLocalService;
import com.tekniti.skilltransit.service.service.SkillCategoryService;
import com.tekniti.skilltransit.service.service.SkillSubCategoryLocalService;
import com.tekniti.skilltransit.service.service.SkillSubCategoryService;
import com.tekniti.skilltransit.service.service.UserDetailsLocalService;
import com.tekniti.skilltransit.service.service.UserDetailsService;
import com.tekniti.skilltransit.service.service.UserSkillsLocalService;
import com.tekniti.skilltransit.service.service.UserSkillsService;
import com.tekniti.skilltransit.service.service.persistence.SkillCategoryPersistence;
import com.tekniti.skilltransit.service.service.persistence.SkillSubCategoryPersistence;
import com.tekniti.skilltransit.service.service.persistence.UserDetailsPersistence;
import com.tekniti.skilltransit.service.service.persistence.UserSkillsPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the user skills local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.tekniti.skilltransit.service.service.impl.UserSkillsLocalServiceImpl}.
 * </p>
 *
 * @author Hari
 * @see com.tekniti.skilltransit.service.service.impl.UserSkillsLocalServiceImpl
 * @see com.tekniti.skilltransit.service.service.UserSkillsLocalServiceUtil
 * @generated
 */
public abstract class UserSkillsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserSkillsLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.tekniti.skilltransit.service.service.UserSkillsLocalServiceUtil} to access the user skills local service.
	 */

	/**
	 * Adds the user skills to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userSkills the user skills
	 * @return the user skills that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public UserSkills addUserSkills(UserSkills userSkills)
		throws SystemException {
		userSkills.setNew(true);

		return userSkillsPersistence.update(userSkills, false);
	}

	/**
	 * Creates a new user skills with the primary key. Does not add the user skills to the database.
	 *
	 * @param primId the primary key for the new user skills
	 * @return the new user skills
	 */
	public UserSkills createUserSkills(long primId) {
		return userSkillsPersistence.create(primId);
	}

	/**
	 * Deletes the user skills with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primId the primary key of the user skills
	 * @return the user skills that was removed
	 * @throws PortalException if a user skills with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public UserSkills deleteUserSkills(long primId)
		throws PortalException, SystemException {
		return userSkillsPersistence.remove(primId);
	}

	/**
	 * Deletes the user skills from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userSkills the user skills
	 * @return the user skills that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public UserSkills deleteUserSkills(UserSkills userSkills)
		throws SystemException {
		return userSkillsPersistence.remove(userSkills);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserSkills.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userSkillsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userSkillsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userSkillsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userSkillsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public UserSkills fetchUserSkills(long primId) throws SystemException {
		return userSkillsPersistence.fetchByPrimaryKey(primId);
	}

	/**
	 * Returns the user skills with the primary key.
	 *
	 * @param primId the primary key of the user skills
	 * @return the user skills
	 * @throws PortalException if a user skills with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public UserSkills getUserSkills(long primId)
		throws PortalException, SystemException {
		return userSkillsPersistence.findByPrimaryKey(primId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userSkillsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user skillses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of user skillses
	 * @param end the upper bound of the range of user skillses (not inclusive)
	 * @return the range of user skillses
	 * @throws SystemException if a system exception occurred
	 */
	public List<UserSkills> getUserSkillses(int start, int end)
		throws SystemException {
		return userSkillsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user skillses.
	 *
	 * @return the number of user skillses
	 * @throws SystemException if a system exception occurred
	 */
	public int getUserSkillsesCount() throws SystemException {
		return userSkillsPersistence.countAll();
	}

	/**
	 * Updates the user skills in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userSkills the user skills
	 * @return the user skills that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public UserSkills updateUserSkills(UserSkills userSkills)
		throws SystemException {
		return updateUserSkills(userSkills, true);
	}

	/**
	 * Updates the user skills in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userSkills the user skills
	 * @param merge whether to merge the user skills with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the user skills that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public UserSkills updateUserSkills(UserSkills userSkills, boolean merge)
		throws SystemException {
		userSkills.setNew(false);

		return userSkillsPersistence.update(userSkills, merge);
	}

	/**
	 * Returns the skill category local service.
	 *
	 * @return the skill category local service
	 */
	public SkillCategoryLocalService getSkillCategoryLocalService() {
		return skillCategoryLocalService;
	}

	/**
	 * Sets the skill category local service.
	 *
	 * @param skillCategoryLocalService the skill category local service
	 */
	public void setSkillCategoryLocalService(
		SkillCategoryLocalService skillCategoryLocalService) {
		this.skillCategoryLocalService = skillCategoryLocalService;
	}

	/**
	 * Returns the skill category remote service.
	 *
	 * @return the skill category remote service
	 */
	public SkillCategoryService getSkillCategoryService() {
		return skillCategoryService;
	}

	/**
	 * Sets the skill category remote service.
	 *
	 * @param skillCategoryService the skill category remote service
	 */
	public void setSkillCategoryService(
		SkillCategoryService skillCategoryService) {
		this.skillCategoryService = skillCategoryService;
	}

	/**
	 * Returns the skill category persistence.
	 *
	 * @return the skill category persistence
	 */
	public SkillCategoryPersistence getSkillCategoryPersistence() {
		return skillCategoryPersistence;
	}

	/**
	 * Sets the skill category persistence.
	 *
	 * @param skillCategoryPersistence the skill category persistence
	 */
	public void setSkillCategoryPersistence(
		SkillCategoryPersistence skillCategoryPersistence) {
		this.skillCategoryPersistence = skillCategoryPersistence;
	}

	/**
	 * Returns the skill sub category local service.
	 *
	 * @return the skill sub category local service
	 */
	public SkillSubCategoryLocalService getSkillSubCategoryLocalService() {
		return skillSubCategoryLocalService;
	}

	/**
	 * Sets the skill sub category local service.
	 *
	 * @param skillSubCategoryLocalService the skill sub category local service
	 */
	public void setSkillSubCategoryLocalService(
		SkillSubCategoryLocalService skillSubCategoryLocalService) {
		this.skillSubCategoryLocalService = skillSubCategoryLocalService;
	}

	/**
	 * Returns the skill sub category remote service.
	 *
	 * @return the skill sub category remote service
	 */
	public SkillSubCategoryService getSkillSubCategoryService() {
		return skillSubCategoryService;
	}

	/**
	 * Sets the skill sub category remote service.
	 *
	 * @param skillSubCategoryService the skill sub category remote service
	 */
	public void setSkillSubCategoryService(
		SkillSubCategoryService skillSubCategoryService) {
		this.skillSubCategoryService = skillSubCategoryService;
	}

	/**
	 * Returns the skill sub category persistence.
	 *
	 * @return the skill sub category persistence
	 */
	public SkillSubCategoryPersistence getSkillSubCategoryPersistence() {
		return skillSubCategoryPersistence;
	}

	/**
	 * Sets the skill sub category persistence.
	 *
	 * @param skillSubCategoryPersistence the skill sub category persistence
	 */
	public void setSkillSubCategoryPersistence(
		SkillSubCategoryPersistence skillSubCategoryPersistence) {
		this.skillSubCategoryPersistence = skillSubCategoryPersistence;
	}

	/**
	 * Returns the user details local service.
	 *
	 * @return the user details local service
	 */
	public UserDetailsLocalService getUserDetailsLocalService() {
		return userDetailsLocalService;
	}

	/**
	 * Sets the user details local service.
	 *
	 * @param userDetailsLocalService the user details local service
	 */
	public void setUserDetailsLocalService(
		UserDetailsLocalService userDetailsLocalService) {
		this.userDetailsLocalService = userDetailsLocalService;
	}

	/**
	 * Returns the user details remote service.
	 *
	 * @return the user details remote service
	 */
	public UserDetailsService getUserDetailsService() {
		return userDetailsService;
	}

	/**
	 * Sets the user details remote service.
	 *
	 * @param userDetailsService the user details remote service
	 */
	public void setUserDetailsService(UserDetailsService userDetailsService) {
		this.userDetailsService = userDetailsService;
	}

	/**
	 * Returns the user details persistence.
	 *
	 * @return the user details persistence
	 */
	public UserDetailsPersistence getUserDetailsPersistence() {
		return userDetailsPersistence;
	}

	/**
	 * Sets the user details persistence.
	 *
	 * @param userDetailsPersistence the user details persistence
	 */
	public void setUserDetailsPersistence(
		UserDetailsPersistence userDetailsPersistence) {
		this.userDetailsPersistence = userDetailsPersistence;
	}

	/**
	 * Returns the user skills local service.
	 *
	 * @return the user skills local service
	 */
	public UserSkillsLocalService getUserSkillsLocalService() {
		return userSkillsLocalService;
	}

	/**
	 * Sets the user skills local service.
	 *
	 * @param userSkillsLocalService the user skills local service
	 */
	public void setUserSkillsLocalService(
		UserSkillsLocalService userSkillsLocalService) {
		this.userSkillsLocalService = userSkillsLocalService;
	}

	/**
	 * Returns the user skills remote service.
	 *
	 * @return the user skills remote service
	 */
	public UserSkillsService getUserSkillsService() {
		return userSkillsService;
	}

	/**
	 * Sets the user skills remote service.
	 *
	 * @param userSkillsService the user skills remote service
	 */
	public void setUserSkillsService(UserSkillsService userSkillsService) {
		this.userSkillsService = userSkillsService;
	}

	/**
	 * Returns the user skills persistence.
	 *
	 * @return the user skills persistence
	 */
	public UserSkillsPersistence getUserSkillsPersistence() {
		return userSkillsPersistence;
	}

	/**
	 * Sets the user skills persistence.
	 *
	 * @param userSkillsPersistence the user skills persistence
	 */
	public void setUserSkillsPersistence(
		UserSkillsPersistence userSkillsPersistence) {
		this.userSkillsPersistence = userSkillsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.tekniti.skilltransit.service.model.UserSkills",
			userSkillsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.tekniti.skilltransit.service.model.UserSkills");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserSkills.class;
	}

	protected String getModelClassName() {
		return UserSkills.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userSkillsPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = SkillCategoryLocalService.class)
	protected SkillCategoryLocalService skillCategoryLocalService;
	@BeanReference(type = SkillCategoryService.class)
	protected SkillCategoryService skillCategoryService;
	@BeanReference(type = SkillCategoryPersistence.class)
	protected SkillCategoryPersistence skillCategoryPersistence;
	@BeanReference(type = SkillSubCategoryLocalService.class)
	protected SkillSubCategoryLocalService skillSubCategoryLocalService;
	@BeanReference(type = SkillSubCategoryService.class)
	protected SkillSubCategoryService skillSubCategoryService;
	@BeanReference(type = SkillSubCategoryPersistence.class)
	protected SkillSubCategoryPersistence skillSubCategoryPersistence;
	@BeanReference(type = UserDetailsLocalService.class)
	protected UserDetailsLocalService userDetailsLocalService;
	@BeanReference(type = UserDetailsService.class)
	protected UserDetailsService userDetailsService;
	@BeanReference(type = UserDetailsPersistence.class)
	protected UserDetailsPersistence userDetailsPersistence;
	@BeanReference(type = UserSkillsLocalService.class)
	protected UserSkillsLocalService userSkillsLocalService;
	@BeanReference(type = UserSkillsService.class)
	protected UserSkillsService userSkillsService;
	@BeanReference(type = UserSkillsPersistence.class)
	protected UserSkillsPersistence userSkillsPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserSkillsLocalServiceClpInvoker _clpInvoker = new UserSkillsLocalServiceClpInvoker();
}